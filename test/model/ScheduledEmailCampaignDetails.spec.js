/*
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ScheduledEmailCampaignDetails', function() {
      beforeEach(function() {
        instance = new TextmagicClient.ScheduledEmailCampaignDetails();
      });

      it('should create an instance of ScheduledEmailCampaignDetails', function() {
        // TODO: update the code to test ScheduledEmailCampaignDetails
        expect(instance).to.be.a(TextmagicClient.ScheduledEmailCampaignDetails);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property emailSenderId (base name: "emailSenderId")', function() {
        // TODO: update the code to test the property emailSenderId
        expect(instance).to.have.property('emailSenderId');
        // expect(instance.emailSenderId).to.be(expectedValueLiteral);
      });

      it('should have the property startAt (base name: "startAt")', function() {
        // TODO: update the code to test the property startAt
        expect(instance).to.have.property('startAt');
        // expect(instance.startAt).to.be(expectedValueLiteral);
      });

      it('should have the property endAt (base name: "endAt")', function() {
        // TODO: update the code to test the property endAt
        expect(instance).to.have.property('endAt');
        // expect(instance.endAt).to.be(expectedValueLiteral);
      });

      it('should have the property nextSendAt (base name: "nextSendAt")', function() {
        // TODO: update the code to test the property nextSendAt
        expect(instance).to.have.property('nextSendAt');
        // expect(instance.nextSendAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property fromName (base name: "fromName")', function() {
        // TODO: update the code to test the property fromName
        expect(instance).to.have.property('fromName');
        // expect(instance.fromName).to.be(expectedValueLiteral);
      });

      it('should have the property fromEmail (base name: "fromEmail")', function() {
        // TODO: update the code to test the property fromEmail
        expect(instance).to.have.property('fromEmail');
        // expect(instance.fromEmail).to.be(expectedValueLiteral);
      });

      it('should have the property replyToEmail (base name: "replyToEmail")', function() {
        // TODO: update the code to test the property replyToEmail
        expect(instance).to.have.property('replyToEmail');
        // expect(instance.replyToEmail).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property html (base name: "html")', function() {
        // TODO: update the code to test the property html
        expect(instance).to.have.property('html');
        // expect(instance.html).to.be(expectedValueLiteral);
      });

      it('should have the property recipientsCount (base name: "recipientsCount")', function() {
        // TODO: update the code to test the property recipientsCount
        expect(instance).to.have.property('recipientsCount');
        // expect(instance.recipientsCount).to.be(expectedValueLiteral);
      });

      it('should have the property sendingTimezone (base name: "sendingTimezone")', function() {
        // TODO: update the code to test the property sendingTimezone
        expect(instance).to.have.property('sendingTimezone');
        // expect(instance.sendingTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property rrule (base name: "rrule")', function() {
        // TODO: update the code to test the property rrule
        expect(instance).to.have.property('rrule');
        // expect(instance.rrule).to.be(expectedValueLiteral);
      });

      it('should have the property occurrenceSummary (base name: "occurrenceSummary")', function() {
        // TODO: update the code to test the property occurrenceSummary
        expect(instance).to.have.property('occurrenceSummary');
        // expect(instance.occurrenceSummary).to.be(expectedValueLiteral);
      });

    });
  });

}));
