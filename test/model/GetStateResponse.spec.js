/*
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetStateResponse', function() {
      beforeEach(function() {
        instance = new TextmagicClient.GetStateResponse();
      });

      it('should create an instance of GetStateResponse', function() {
        // TODO: update the code to test GetStateResponse
        expect(instance).to.be.a(TextmagicClient.GetStateResponse);
      });

      it('should have the property systemCacheClear (base name: "systemCacheClear")', function() {
        // TODO: update the code to test the property systemCacheClear
        expect(instance).to.have.property('systemCacheClear');
        // expect(instance.systemCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property systemExit (base name: "systemExit")', function() {
        // TODO: update the code to test the property systemExit
        expect(instance).to.have.property('systemExit');
        // expect(instance.systemExit).to.be(expectedValueLiteral);
      });

      it('should have the property systemAlert (base name: "systemAlert")', function() {
        // TODO: update the code to test the property systemAlert
        expect(instance).to.have.property('systemAlert');
        // expect(instance.systemAlert).to.be(expectedValueLiteral);
      });

      it('should have the property systemAccountStateChanged (base name: "systemAccountStateChanged")', function() {
        // TODO: update the code to test the property systemAccountStateChanged
        expect(instance).to.have.property('systemAccountStateChanged');
        // expect(instance.systemAccountStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property systemAccountClosed (base name: "systemAccountClosed")', function() {
        // TODO: update the code to test the property systemAccountClosed
        expect(instance).to.have.property('systemAccountClosed');
        // expect(instance.systemAccountClosed).to.be(expectedValueLiteral);
      });

      it('should have the property systemAccountAdditionalFields (base name: "systemAccountAdditionalFields")', function() {
        // TODO: update the code to test the property systemAccountAdditionalFields
        expect(instance).to.have.property('systemAccountAdditionalFields');
        // expect(instance.systemAccountAdditionalFields).to.be(expectedValueLiteral);
      });

      it('should have the property systemAccountPermissionsChanged (base name: "systemAccountPermissionsChanged")', function() {
        // TODO: update the code to test the property systemAccountPermissionsChanged
        expect(instance).to.have.property('systemAccountPermissionsChanged');
        // expect(instance.systemAccountPermissionsChanged).to.be(expectedValueLiteral);
      });

      it('should have the property userProfileChanged (base name: "userProfileChanged")', function() {
        // TODO: update the code to test the property userProfileChanged
        expect(instance).to.have.property('userProfileChanged');
        // expect(instance.userProfileChanged).to.be(expectedValueLiteral);
      });

      it('should have the property userBalanceChanged (base name: "userBalanceChanged")', function() {
        // TODO: update the code to test the property userBalanceChanged
        expect(instance).to.have.property('userBalanceChanged');
        // expect(instance.userBalanceChanged).to.be(expectedValueLiteral);
      });

      it('should have the property userImpersonationEnd (base name: "userImpersonationEnd")', function() {
        // TODO: update the code to test the property userImpersonationEnd
        expect(instance).to.have.property('userImpersonationEnd');
        // expect(instance.userImpersonationEnd).to.be(expectedValueLiteral);
      });

      it('should have the property messageDeleted (base name: "messageDeleted")', function() {
        // TODO: update the code to test the property messageDeleted
        expect(instance).to.have.property('messageDeleted');
        // expect(instance.messageDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property messageIncoming (base name: "messageIncoming")', function() {
        // TODO: update the code to test the property messageIncoming
        expect(instance).to.have.property('messageIncoming');
        // expect(instance.messageIncoming).to.be(expectedValueLiteral);
      });

      it('should have the property messageIncomingDeleted (base name: "messageIncomingDeleted")', function() {
        // TODO: update the code to test the property messageIncomingDeleted
        expect(instance).to.have.property('messageIncomingDeleted');
        // expect(instance.messageIncomingDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property messageStateChanged (base name: "messageStateChanged")', function() {
        // TODO: update the code to test the property messageStateChanged
        expect(instance).to.have.property('messageStateChanged');
        // expect(instance.messageStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property messageBulkEnd (base name: "messageBulkEnd")', function() {
        // TODO: update the code to test the property messageBulkEnd
        expect(instance).to.have.property('messageBulkEnd');
        // expect(instance.messageBulkEnd).to.be(expectedValueLiteral);
      });

      it('should have the property messageWipeEnd (base name: "messageWipeEnd")', function() {
        // TODO: update the code to test the property messageWipeEnd
        expect(instance).to.have.property('messageWipeEnd');
        // expect(instance.messageWipeEnd).to.be(expectedValueLiteral);
      });

      it('should have the property messageSent (base name: "messageSent")', function() {
        // TODO: update the code to test the property messageSent
        expect(instance).to.have.property('messageSent');
        // expect(instance.messageSent).to.be(expectedValueLiteral);
      });

      it('should have the property messageSessionDeleted (base name: "messageSessionDeleted")', function() {
        // TODO: update the code to test the property messageSessionDeleted
        expect(instance).to.have.property('messageSessionDeleted');
        // expect(instance.messageSessionDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property messageCacheClear (base name: "messageCacheClear")', function() {
        // TODO: update the code to test the property messageCacheClear
        expect(instance).to.have.property('messageCacheClear');
        // expect(instance.messageCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property messageIncomingCacheClear (base name: "messageIncomingCacheClear")', function() {
        // TODO: update the code to test the property messageIncomingCacheClear
        expect(instance).to.have.property('messageIncomingCacheClear');
        // expect(instance.messageIncomingCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property messageScheduleAdded (base name: "messageScheduleAdded")', function() {
        // TODO: update the code to test the property messageScheduleAdded
        expect(instance).to.have.property('messageScheduleAdded');
        // expect(instance.messageScheduleAdded).to.be(expectedValueLiteral);
      });

      it('should have the property messageScheduleStateChanged (base name: "messageScheduleStateChanged")', function() {
        // TODO: update the code to test the property messageScheduleStateChanged
        expect(instance).to.have.property('messageScheduleStateChanged');
        // expect(instance.messageScheduleStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property messageScheduleDeleted (base name: "messageScheduleDeleted")', function() {
        // TODO: update the code to test the property messageScheduleDeleted
        expect(instance).to.have.property('messageScheduleDeleted');
        // expect(instance.messageScheduleDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property messageScheduleNotSentStateChanged (base name: "messageScheduleNotSentStateChanged")', function() {
        // TODO: update the code to test the property messageScheduleNotSentStateChanged
        expect(instance).to.have.property('messageScheduleNotSentStateChanged');
        // expect(instance.messageScheduleNotSentStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property messageScheduleCacheClear (base name: "messageScheduleCacheClear")', function() {
        // TODO: update the code to test the property messageScheduleCacheClear
        expect(instance).to.have.property('messageScheduleCacheClear');
        // expect(instance.messageScheduleCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property messageTemplateCacheClear (base name: "messageTemplateCacheClear")', function() {
        // TODO: update the code to test the property messageTemplateCacheClear
        expect(instance).to.have.property('messageTemplateCacheClear');
        // expect(instance.messageTemplateCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property callFinished (base name: "callFinished")', function() {
        // TODO: update the code to test the property callFinished
        expect(instance).to.have.property('callFinished');
        // expect(instance.callFinished).to.be(expectedValueLiteral);
      });

      it('should have the property chatCreated (base name: "chatCreated")', function() {
        // TODO: update the code to test the property chatCreated
        expect(instance).to.have.property('chatCreated');
        // expect(instance.chatCreated).to.be(expectedValueLiteral);
      });

      it('should have the property chatMarkedAsRead (base name: "chatMarkedAsRead")', function() {
        // TODO: update the code to test the property chatMarkedAsRead
        expect(instance).to.have.property('chatMarkedAsRead');
        // expect(instance.chatMarkedAsRead).to.be(expectedValueLiteral);
      });

      it('should have the property chatMuted (base name: "chatMuted")', function() {
        // TODO: update the code to test the property chatMuted
        expect(instance).to.have.property('chatMuted');
        // expect(instance.chatMuted).to.be(expectedValueLiteral);
      });

      it('should have the property chatUnmuted (base name: "chatUnmuted")', function() {
        // TODO: update the code to test the property chatUnmuted
        expect(instance).to.have.property('chatUnmuted');
        // expect(instance.chatUnmuted).to.be(expectedValueLiteral);
      });

      it('should have the property chatPinned (base name: "chatPinned")', function() {
        // TODO: update the code to test the property chatPinned
        expect(instance).to.have.property('chatPinned');
        // expect(instance.chatPinned).to.be(expectedValueLiteral);
      });

      it('should have the property chatUnpinned (base name: "chatUnpinned")', function() {
        // TODO: update the code to test the property chatUnpinned
        expect(instance).to.have.property('chatUnpinned');
        // expect(instance.chatUnpinned).to.be(expectedValueLiteral);
      });

      it('should have the property chatDeleted (base name: "chatDeleted")', function() {
        // TODO: update the code to test the property chatDeleted
        expect(instance).to.have.property('chatDeleted');
        // expect(instance.chatDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property chatClosed (base name: "chatClosed")', function() {
        // TODO: update the code to test the property chatClosed
        expect(instance).to.have.property('chatClosed');
        // expect(instance.chatClosed).to.be(expectedValueLiteral);
      });

      it('should have the property chatReopened (base name: "chatReopened")', function() {
        // TODO: update the code to test the property chatReopened
        expect(instance).to.have.property('chatReopened');
        // expect(instance.chatReopened).to.be(expectedValueLiteral);
      });

      it('should have the property chatCacheClear (base name: "chatCacheClear")', function() {
        // TODO: update the code to test the property chatCacheClear
        expect(instance).to.have.property('chatCacheClear');
        // expect(instance.chatCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property chatRead (base name: "chatRead")', function() {
        // TODO: update the code to test the property chatRead
        expect(instance).to.have.property('chatRead');
        // expect(instance.chatRead).to.be(expectedValueLiteral);
      });

      it('should have the property chatUnread (base name: "chatUnread")', function() {
        // TODO: update the code to test the property chatUnread
        expect(instance).to.have.property('chatUnread');
        // expect(instance.chatUnread).to.be(expectedValueLiteral);
      });

      it('should have the property contactAdded (base name: "contactAdded")', function() {
        // TODO: update the code to test the property contactAdded
        expect(instance).to.have.property('contactAdded');
        // expect(instance.contactAdded).to.be(expectedValueLiteral);
      });

      it('should have the property contactDeleted (base name: "contactDeleted")', function() {
        // TODO: update the code to test the property contactDeleted
        expect(instance).to.have.property('contactDeleted');
        // expect(instance.contactDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property contactStateChanged (base name: "contactStateChanged")', function() {
        // TODO: update the code to test the property contactStateChanged
        expect(instance).to.have.property('contactStateChanged');
        // expect(instance.contactStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property listAdded (base name: "listAdded")', function() {
        // TODO: update the code to test the property listAdded
        expect(instance).to.have.property('listAdded');
        // expect(instance.listAdded).to.be(expectedValueLiteral);
      });

      it('should have the property listDeleted (base name: "listDeleted")', function() {
        // TODO: update the code to test the property listDeleted
        expect(instance).to.have.property('listDeleted');
        // expect(instance.listDeleted).to.be(expectedValueLiteral);
      });

      it('should have the property listStateChanged (base name: "listStateChanged")', function() {
        // TODO: update the code to test the property listStateChanged
        expect(instance).to.have.property('listStateChanged');
        // expect(instance.listStateChanged).to.be(expectedValueLiteral);
      });

      it('should have the property contactWipeEnd (base name: "contactWipeEnd")', function() {
        // TODO: update the code to test the property contactWipeEnd
        expect(instance).to.have.property('contactWipeEnd');
        // expect(instance.contactWipeEnd).to.be(expectedValueLiteral);
      });

      it('should have the property contactImportEnd (base name: "contactImportEnd")', function() {
        // TODO: update the code to test the property contactImportEnd
        expect(instance).to.have.property('contactImportEnd');
        // expect(instance.contactImportEnd).to.be(expectedValueLiteral);
      });

      it('should have the property contactCacheClear (base name: "contactCacheClear")', function() {
        // TODO: update the code to test the property contactCacheClear
        expect(instance).to.have.property('contactCacheClear');
        // expect(instance.contactCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property listCacheClear (base name: "listCacheClear")', function() {
        // TODO: update the code to test the property listCacheClear
        expect(instance).to.have.property('listCacheClear');
        // expect(instance.listCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property customFieldsCacheClear (base name: "customFieldsCacheClear")', function() {
        // TODO: update the code to test the property customFieldsCacheClear
        expect(instance).to.have.property('customFieldsCacheClear');
        // expect(instance.customFieldsCacheClear).to.be(expectedValueLiteral);
      });

      it('should have the property progressCarrierBulkLookup (base name: "progressCarrierBulkLookup")', function() {
        // TODO: update the code to test the property progressCarrierBulkLookup
        expect(instance).to.have.property('progressCarrierBulkLookup');
        // expect(instance.progressCarrierBulkLookup).to.be(expectedValueLiteral);
      });

      it('should have the property progressEmailBulkLookup (base name: "progressEmailBulkLookup")', function() {
        // TODO: update the code to test the property progressEmailBulkLookup
        expect(instance).to.have.property('progressEmailBulkLookup');
        // expect(instance.progressEmailBulkLookup).to.be(expectedValueLiteral);
      });

      it('should have the property progressSubAccountBulkImport (base name: "progressSubAccountBulkImport")', function() {
        // TODO: update the code to test the property progressSubAccountBulkImport
        expect(instance).to.have.property('progressSubAccountBulkImport');
        // expect(instance.progressSubAccountBulkImport).to.be(expectedValueLiteral);
      });

      it('should have the property progressContactBulkImport (base name: "progressContactBulkImport")', function() {
        // TODO: update the code to test the property progressContactBulkImport
        expect(instance).to.have.property('progressContactBulkImport');
        // expect(instance.progressContactBulkImport).to.be(expectedValueLiteral);
      });

      it('should have the property forceRefreshWebApp (base name: "forceRefreshWebApp")', function() {
        // TODO: update the code to test the property forceRefreshWebApp
        expect(instance).to.have.property('forceRefreshWebApp');
        // expect(instance.forceRefreshWebApp).to.be(expectedValueLiteral);
      });

      it('should have the property chatSenderSettingsChanged (base name: "chatSenderSettingsChanged")', function() {
        // TODO: update the code to test the property chatSenderSettingsChanged
        expect(instance).to.have.property('chatSenderSettingsChanged');
        // expect(instance.chatSenderSettingsChanged).to.be(expectedValueLiteral);
      });

      it('should have the property countrySenderSettingsChanged (base name: "countrySenderSettingsChanged")', function() {
        // TODO: update the code to test the property countrySenderSettingsChanged
        expect(instance).to.have.property('countrySenderSettingsChanged');
        // expect(instance.countrySenderSettingsChanged).to.be(expectedValueLiteral);
      });

      it('should have the property chatSummaryChunk (base name: "chatSummaryChunk")', function() {
        // TODO: update the code to test the property chatSummaryChunk
        expect(instance).to.have.property('chatSummaryChunk');
        // expect(instance.chatSummaryChunk).to.be(expectedValueLiteral);
      });

      it('should have the property chatWaysToReplyChunk (base name: "chatWaysToReplyChunk")', function() {
        // TODO: update the code to test the property chatWaysToReplyChunk
        expect(instance).to.have.property('chatWaysToReplyChunk');
        // expect(instance.chatWaysToReplyChunk).to.be(expectedValueLiteral);
      });

      it('should have the property chatSuggestedReplyChunk (base name: "chatSuggestedReplyChunk")', function() {
        // TODO: update the code to test the property chatSuggestedReplyChunk
        expect(instance).to.have.property('chatSuggestedReplyChunk');
        // expect(instance.chatSuggestedReplyChunk).to.be(expectedValueLiteral);
      });

      it('should have the property userSubscriptionChanged (base name: "userSubscriptionChanged")', function() {
        // TODO: update the code to test the property userSubscriptionChanged
        expect(instance).to.have.property('userSubscriptionChanged');
        // expect(instance.userSubscriptionChanged).to.be(expectedValueLiteral);
      });

      it('should have the property userSubscriptionDeleted (base name: "userSubscriptionDeleted")', function() {
        // TODO: update the code to test the property userSubscriptionDeleted
        expect(instance).to.have.property('userSubscriptionDeleted');
        // expect(instance.userSubscriptionDeleted).to.be(expectedValueLiteral);
      });

    });
  });

}));
