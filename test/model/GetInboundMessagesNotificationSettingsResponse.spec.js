/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetInboundMessagesNotificationSettingsResponse', function() {
    it('should create an instance of GetInboundMessagesNotificationSettingsResponse', function() {
      // uncomment below and update the code to test GetInboundMessagesNotificationSettingsResponse
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be.a(TextmagicClient.GetInboundMessagesNotificationSettingsResponse);
    });

    it('should have the property inboundMessageNotification (base name: "inboundMessageNotification")', function() {
      // uncomment below and update the code to test the property inboundMessageNotification
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property forwardedCallNotification (base name: "forwardedCallNotification")', function() {
      // uncomment below and update the code to test the property forwardedCallNotification
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property includeSmsHistory (base name: "includeSmsHistory")', function() {
      // uncomment below and update the code to test the property includeSmsHistory
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property sendInHtmlFormat (base name: "sendInHtmlFormat")', function() {
      // uncomment below and update the code to test the property sendInHtmlFormat
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property alertEmail1 (base name: "alertEmail1")', function() {
      // uncomment below and update the code to test the property alertEmail1
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property alertEmail2 (base name: "alertEmail2")', function() {
      // uncomment below and update the code to test the property alertEmail2
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property alertEmail3 (base name: "alertEmail3")', function() {
      // uncomment below and update the code to test the property alertEmail3
      //var instance = new TextmagicClient.GetInboundMessagesNotificationSettingsResponse();
      //expect(instance).to.be();
    });

  });

}));
