/*
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OutboundEmailResponse', function() {
      beforeEach(function() {
        instance = new TextmagicClient.OutboundEmailResponse();
      });

      it('should create an instance of OutboundEmailResponse', function() {
        // TODO: update the code to test OutboundEmailResponse
        expect(instance).to.be.a(TextmagicClient.OutboundEmailResponse);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property sendTime (base name: "sendTime")', function() {
        // TODO: update the code to test the property sendTime
        expect(instance).to.have.property('sendTime');
        // expect(instance.sendTime).to.be(expectedValueLiteral);
      });

      it('should have the property fromName (base name: "fromName")', function() {
        // TODO: update the code to test the property fromName
        expect(instance).to.have.property('fromName');
        // expect(instance.fromName).to.be(expectedValueLiteral);
      });

      it('should have the property fromEmail (base name: "fromEmail")', function() {
        // TODO: update the code to test the property fromEmail
        expect(instance).to.have.property('fromEmail');
        // expect(instance.fromEmail).to.be(expectedValueLiteral);
      });

      it('should have the property replyToEmail (base name: "replyToEmail")', function() {
        // TODO: update the code to test the property replyToEmail
        expect(instance).to.have.property('replyToEmail');
        // expect(instance.replyToEmail).to.be(expectedValueLiteral);
      });

      it('should have the property recipientFullName (base name: "recipientFullName")', function() {
        // TODO: update the code to test the property recipientFullName
        expect(instance).to.have.property('recipientFullName');
        // expect(instance.recipientFullName).to.be(expectedValueLiteral);
      });

      it('should have the property recipientEmail (base name: "recipientEmail")', function() {
        // TODO: update the code to test the property recipientEmail
        expect(instance).to.have.property('recipientEmail');
        // expect(instance.recipientEmail).to.be(expectedValueLiteral);
      });

      it('should have the property emailSubject (base name: "emailSubject")', function() {
        // TODO: update the code to test the property emailSubject
        expect(instance).to.have.property('emailSubject');
        // expect(instance.emailSubject).to.be(expectedValueLiteral);
      });

      it('should have the property emailContent (base name: "emailContent")', function() {
        // TODO: update the code to test the property emailContent
        expect(instance).to.have.property('emailContent');
        // expect(instance.emailContent).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property cost (base name: "cost")', function() {
        // TODO: update the code to test the property cost
        expect(instance).to.have.property('cost');
        // expect(instance.cost).to.be(expectedValueLiteral);
      });

      it('should have the property statusReason (base name: "statusReason")', function() {
        // TODO: update the code to test the property statusReason
        expect(instance).to.have.property('statusReason');
        // expect(instance.statusReason).to.be(expectedValueLiteral);
      });

      it('should have the property contactId (base name: "contactId")', function() {
        // TODO: update the code to test the property contactId
        expect(instance).to.have.property('contactId');
        // expect(instance.contactId).to.be(expectedValueLiteral);
      });

      it('should have the property initiatorId (base name: "initiatorId")', function() {
        // TODO: update the code to test the property initiatorId
        expect(instance).to.have.property('initiatorId');
        // expect(instance.initiatorId).to.be(expectedValueLiteral);
      });

    });
  });

}));
