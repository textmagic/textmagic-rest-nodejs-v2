/*
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetAvailableSenderSettingOptionsResponse', function() {
      beforeEach(function() {
        instance = new TextmagicClient.GetAvailableSenderSettingOptionsResponse();
      });

      it('should create an instance of GetAvailableSenderSettingOptionsResponse', function() {
        // TODO: update the code to test GetAvailableSenderSettingOptionsResponse
        expect(instance).to.be.a(TextmagicClient.GetAvailableSenderSettingOptionsResponse);
      });

      it('should have the property dedicated (base name: "dedicated")', function() {
        // TODO: update the code to test the property dedicated
        expect(instance).to.have.property('dedicated');
        // expect(instance.dedicated).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property shared (base name: "shared")', function() {
        // TODO: update the code to test the property shared
        expect(instance).to.have.property('shared');
        // expect(instance.shared).to.be(expectedValueLiteral);
      });

      it('should have the property senderIds (base name: "senderIds")', function() {
        // TODO: update the code to test the property senderIds
        expect(instance).to.have.property('senderIds');
        // expect(instance.senderIds).to.be(expectedValueLiteral);
      });

      it('should have the property userCarrierTwilio (base name: "userCarrierTwilio")', function() {
        // TODO: update the code to test the property userCarrierTwilio
        expect(instance).to.have.property('userCarrierTwilio');
        // expect(instance.userCarrierTwilio).to.be(expectedValueLiteral);
      });

      it('should have the property userCarrierVonage (base name: "userCarrierVonage")', function() {
        // TODO: update the code to test the property userCarrierVonage
        expect(instance).to.have.property('userCarrierVonage');
        // expect(instance.userCarrierVonage).to.be(expectedValueLiteral);
      });

      it('should have the property userCarrierSinch (base name: "userCarrierSinch")', function() {
        // TODO: update the code to test the property userCarrierSinch
        expect(instance).to.have.property('userCarrierSinch');
        // expect(instance.userCarrierSinch).to.be(expectedValueLiteral);
      });

      it('should have the property uCarrierBandwidth (base name: "uCarrierBandwidth")', function() {
        // TODO: update the code to test the property uCarrierBandwidth
        expect(instance).to.have.property('uCarrierBandwidth');
        // expect(instance.uCarrierBandwidth).to.be(expectedValueLiteral);
      });

      it('should have the property ucTwilioSenderId (base name: "ucTwilioSenderId")', function() {
        // TODO: update the code to test the property ucTwilioSenderId
        expect(instance).to.have.property('ucTwilioSenderId');
        // expect(instance.ucTwilioSenderId).to.be(expectedValueLiteral);
      });

    });
  });

}));
