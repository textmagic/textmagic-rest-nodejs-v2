/*
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserPersonalInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./UserPersonalInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.TextmagicClient) {
      root.TextmagicClient = {};
    }
    root.TextmagicClient.ScheduledEmailCampaignDetails = factory(root.TextmagicClient.ApiClient, root.TextmagicClient.UserPersonalInfo);
  }
}(this, function(ApiClient, UserPersonalInfo) {
  'use strict';

  /**
   * The ScheduledEmailCampaignDetails model module.
   * @module model/ScheduledEmailCampaignDetails
   * @version 2.0.43753
   */

  /**
   * Constructs a new <code>ScheduledEmailCampaignDetails</code>.
   * @alias module:model/ScheduledEmailCampaignDetails
   * @class
   * @param id {Number} Unique scheduled campaign ID.
   * @param status {module:model/ScheduledEmailCampaignDetails.StatusEnum} Current scheduled campaign status.
   * @param startAt {Date} Scheduled start timestamp (UTC).
   * @param createdBy {module:model/UserPersonalInfo} 
   * @param createdAt {Date} Campaign creation timestamp.
   * @param updatedAt {Date} Last update timestamp.
   * @param type {module:model/ScheduledEmailCampaignDetails.TypeEnum} Campaign recurrence type.
   * @param fromEmail {String} Sender email address.
   * @param replyToEmail {String} Reply-to email address.
   * @param subject {String} Email subject line.
   * @param html {String} HTML email content.
   * @param recipientsCount {Number} Number of recipients for this campaign.
   * @param sendingTimezone {String} Timezone for sending the campaign.
   */
  var exports = function(id, status, startAt, createdBy, createdAt, updatedAt, type, fromEmail, replyToEmail, subject, html, recipientsCount, sendingTimezone) {
    this.id = id;
    this.status = status;
    this.startAt = startAt;
    this.createdBy = createdBy;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.type = type;
    this.fromEmail = fromEmail;
    this.replyToEmail = replyToEmail;
    this.subject = subject;
    this.html = html;
    this.recipientsCount = recipientsCount;
    this.sendingTimezone = sendingTimezone;
  };

  /**
   * Constructs a <code>ScheduledEmailCampaignDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ScheduledEmailCampaignDetails} obj Optional instance to populate.
   * @return {module:model/ScheduledEmailCampaignDetails} The populated <code>ScheduledEmailCampaignDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('emailSenderId'))
        obj.emailSenderId = ApiClient.convertToType(data['emailSenderId'], 'Number');
      if (data.hasOwnProperty('startAt'))
        obj.startAt = ApiClient.convertToType(data['startAt'], 'Date');
      if (data.hasOwnProperty('endAt'))
        obj.endAt = ApiClient.convertToType(data['endAt'], 'Date');
      if (data.hasOwnProperty('nextSendAt'))
        obj.nextSendAt = ApiClient.convertToType(data['nextSendAt'], 'Date');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = UserPersonalInfo.constructFromObject(data['createdBy']);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('fromName'))
        obj.fromName = ApiClient.convertToType(data['fromName'], 'String');
      if (data.hasOwnProperty('fromEmail'))
        obj.fromEmail = ApiClient.convertToType(data['fromEmail'], 'String');
      if (data.hasOwnProperty('replyToEmail'))
        obj.replyToEmail = ApiClient.convertToType(data['replyToEmail'], 'String');
      if (data.hasOwnProperty('subject'))
        obj.subject = ApiClient.convertToType(data['subject'], 'String');
      if (data.hasOwnProperty('html'))
        obj.html = ApiClient.convertToType(data['html'], 'String');
      if (data.hasOwnProperty('recipientsCount'))
        obj.recipientsCount = ApiClient.convertToType(data['recipientsCount'], 'Number');
      if (data.hasOwnProperty('sendingTimezone'))
        obj.sendingTimezone = ApiClient.convertToType(data['sendingTimezone'], 'String');
      if (data.hasOwnProperty('rrule'))
        obj.rrule = ApiClient.convertToType(data['rrule'], 'String');
      if (data.hasOwnProperty('occurrenceSummary'))
        obj.occurrenceSummary = ApiClient.convertToType(data['occurrenceSummary'], 'String');
    }
    return obj;
  }

  /**
   * Unique scheduled campaign ID.
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Current scheduled campaign status.
   * @member {module:model/ScheduledEmailCampaignDetails.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * Email sender ID used for this campaign.
   * @member {Number} emailSenderId
   */
  exports.prototype.emailSenderId = undefined;

  /**
   * Scheduled start timestamp (UTC).
   * @member {Date} startAt
   */
  exports.prototype.startAt = undefined;

  /**
   * End timestamp for recurring campaigns (UTC).
   * @member {Date} endAt
   */
  exports.prototype.endAt = undefined;

  /**
   * Next scheduled send timestamp (UTC).
   * @member {Date} nextSendAt
   */
  exports.prototype.nextSendAt = undefined;

  /**
   * @member {module:model/UserPersonalInfo} createdBy
   */
  exports.prototype.createdBy = undefined;

  /**
   * Campaign creation timestamp.
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Last update timestamp.
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Campaign recurrence type.
   * @member {module:model/ScheduledEmailCampaignDetails.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   * Sender name displayed in recipient's inbox.
   * @member {String} fromName
   */
  exports.prototype.fromName = undefined;

  /**
   * Sender email address.
   * @member {String} fromEmail
   */
  exports.prototype.fromEmail = undefined;

  /**
   * Reply-to email address.
   * @member {String} replyToEmail
   */
  exports.prototype.replyToEmail = undefined;

  /**
   * Email subject line.
   * @member {String} subject
   */
  exports.prototype.subject = undefined;

  /**
   * HTML email content.
   * @member {String} html
   */
  exports.prototype.html = undefined;

  /**
   * Number of recipients for this campaign.
   * @member {Number} recipientsCount
   */
  exports.prototype.recipientsCount = undefined;

  /**
   * Timezone for sending the campaign.
   * @member {String} sendingTimezone
   */
  exports.prototype.sendingTimezone = undefined;

  /**
   * RFC 5545 recurrence rule for recurring campaigns.
   * @member {String} rrule
   */
  exports.prototype.rrule = undefined;

  /**
   * Human-readable schedule description.
   * @member {String} occurrenceSummary
   */
  exports.prototype.occurrenceSummary = undefined;


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "scheduled"
     * @const
     */
    scheduled: "scheduled",

    /**
     * value: "active"
     * @const
     */
    active: "active",

    /**
     * value: "paused"
     * @const
     */
    paused: "paused",

    /**
     * value: "completed"
     * @const
     */
    completed: "completed",

    /**
     * value: "cancelled"
     * @const
     */
    cancelled: "cancelled",

    /**
     * value: "failed"
     * @const
     */
    failed: "failed"
  };


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "once"
     * @const
     */
    once: "once",

    /**
     * value: "hourly"
     * @const
     */
    hourly: "hourly",

    /**
     * value: "daily"
     * @const
     */
    daily: "daily",

    /**
     * value: "weekly"
     * @const
     */
    weekly: "weekly",

    /**
     * value: "monthly"
     * @const
     */
    monthly: "monthly",

    /**
     * value: "yearly"
     * @const
     */
    yearly: "yearly",

    /**
     * value: "follow-up"
     * @const
     */
    followUp: "follow-up"
  };

  return exports;

}));
